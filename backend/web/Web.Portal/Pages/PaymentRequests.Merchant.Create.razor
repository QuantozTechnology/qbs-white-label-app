@* Copyright 2023 Quantoz Technology B.V. and contributors. Licensed
    under the Apache License, Version 2.0. See the NOTICE file at the root
    of this distribution or at http://www.apache.org/licenses/LICENSE-2.0 *@

@page "/paymentrequests/merchant"
@using Web.Portal.Extensions;
@using System.Linq.Expressions;
@using Web.SDK.Services.Interfaces;

@attribute [AllowAnonymous]
@inject IMerchantService _merchantService;
@inject IAccountService _accountService;
@inject NavigationManager Navigation

<div class="container py-5">
    <Loading IsLoading="@IsLoading">
        <div class="row d-flex justify-content-center align-items-center">
            <div class="col">
                <div class="card my-4 shadow rounded">
                    <div class="row g-0">
                        <div class="col-xl-6 d-xl-block bg-image">
                            <img src="paymentrequests.merchant.create@3x.png" alt="Sample photo"
                                 class="img-fluid" />
                        </div>
                        <div class="col-xl-6">
                            <div class="card-body p-md-5 text-black">
                                @if (!string.IsNullOrWhiteSpace(Success))
                                {
                                    @if (!bool.Parse(Success))
                                    {
                                        <div class="alert alert-warning d-flex align-items-center alert-dismissible fade show" role="alert">
                                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill" /></svg>
                                            <div>
                                                @Reason
                                            </div>
                                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-success d-flex align-items-center alert-dismissible fade show" role="alert">
                                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill" /></svg>
                                            <div>
                                                @Reason
                                            </div>
                                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                        </div>
                                    }
                                }

                                @if (!string.IsNullOrWhiteSpace(Error))
                                {
                                    <div class="alert alert-danger d-flex align-items-center alert-dismissible fade show" role="alert">
                                        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill" /></svg>
                                        <div>
                                            @Error
                                        </div>
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }

                                <h3 class="mb-4">Generate a new payment request</h3>
                                <EditForm Model="@CreatePaymentRequest" OnValidSubmit="@HandleValidSubmit">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="row">
                                        <div class="col-md-6 mb-4">
                                            <label class="form-label" for="form3Example1m">Account Code:</label>
                                            <InputText @bind-Value="CreatePaymentRequest.AccountCode" min="0" class="form-control form-control-lg" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-4">
                                            <div class="form-outline">
                                                <label class="form-label" for="form3Example1m">Amount:</label>
                                                <InputNumber @bind-Value="CreatePaymentRequest.Amount" min="0" class="form-control form-control-lg" />
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-4">
                                            <label class="form-label" for="form3Example1m">Token Code:</label>
                                            <InputSelect @bind-Value="CreatePaymentRequest.TokenCode" class="form-select form-select-lg">
                                                @foreach (var tokenCode in TokenCodes)
                                                {
                                                    <option value=@tokenCode>@tokenCode</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="mb-4">
                                            <label class="form-label" for="form3Example1m">Expires In:</label>
                                            <InputSelect @bind-Value="CreatePaymentRequest.ExpiresIn" class="form-select form-select-lg">
                                                <option value=@ExpiresIn.FiveMinutes>5 Minutes</option>
                                                <option value=@ExpiresIn.FifteenMinutes>15 Minutes</option>
                                                <option value=@ExpiresIn.SixtyMinutes>1 Hour</option>
                                            </InputSelect>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="mb-4">
                                            <div class="form-outline">
                                                <label class="form-label" for="form3Example1m">Memo / Reference:</label>
                                                <InputText @bind-Value="CreatePaymentRequest.Memo" min="0" class="form-control form-control-lg" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-check">
                                        <InputCheckbox class="form-check-input" @bind-Value="CreatePaymentRequest.ShareName" />
                                        <label class="form-check-label" for="inlineCheckbox2">Share your name with the payer</label>
                                    </div>
                                    <div class="form-check">
                                        <InputCheckbox class="form-check-input" @bind-Value="CreatePaymentRequest.PayerCanChangeRequestedAmount" />
                                        <label class="form-check-label" for="inlineCheckbox1">Allow the payer to change the above amount</label>
                                    </div>

                                    <div class="d-flex justify-content-end pt-3">
                                        <button type="submit" class="btn btn-success btn-lg ms-2" style="background-color:#189ad8 ">
                                            Generate
                                            @if (IsGenerating)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            }
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Loading>
</div>

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
    </symbol>
    <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
    </symbol>
</svg>


@code {
    private string? Success { get; set; } = null;
    private string? Reason { get; set; } = null;
    private string? Error { get; set; } = null;

    private IEnumerable<string> TokenCodes = Array.Empty<string>();

    private bool IsGenerating { get; set; }
    private bool IsLoading { get; set; }

    private PaymentRequest CreatePaymentRequest = new()
        {
            TokenCode = "",
            AccountCode = string.Empty,
            Amount = 10,
            ExpiresIn = ExpiresIn.FifteenMinutes,
            Memo = null,
            ShareName = true,
            PayerCanChangeRequestedAmount = false
        };

    protected override async Task OnInitializedAsync()
    {
        Success = Navigation.GetQueryString("success");
        Reason = Navigation.GetQueryString("reason");

        try
        {
            IsLoading = true;
            var result = await _accountService.GetAccountBalanceAsync();
            IsLoading = false;

            if (result.IsSuccess)
            {
                TokenCodes = result.Value.Select(ab => ab.TokenCode);

                if (TokenCodes.Any())
                {
                    CreatePaymentRequest.TokenCode = TokenCodes.FirstOrDefault()!;
                }
            }
            else
            {
                Error = result.Error.Errors.ElementAt(0).Message;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void HandleValidSubmit()
    {
        var command = new CreateMerchantPaymentRequestCommand
            {
                Amount = CreatePaymentRequest.Amount,
                TokenCode = CreatePaymentRequest.TokenCode,
                Options = new PaymentRequestOptions
                {
                    IsOneOffPayment = true,
                    PayerCanChangeRequestedAmount = CreatePaymentRequest.PayerCanChangeRequestedAmount,
                    ShareName = CreatePaymentRequest.ShareName,
                    Memo = CreatePaymentRequest.Memo,
                    ExpiresOn = DateTimeOffset.UtcNow.AddMinutes((int)CreatePaymentRequest.ExpiresIn).ToUnixTimeMilliseconds()
                },
                MerchantSettings = new MerchantSettings
                {
                    ReturnUrl = $"{Navigation.BaseUri}paymentrequests/merchant"
                },
                AccountCode = CreatePaymentRequest.AccountCode
            };

        try
        {
            IsGenerating = true;
            var result = await _merchantService.CreatePaymentRequestAsync(command);

            if (result.IsSuccess)
            {
                Navigation.NavigateTo(result.Value.MerchantSettings.RedirectUrl);
            }
            else
            {
                IsGenerating = false;
                Error = result.Error.Errors.ElementAt(0).Message;
                StateHasChanged();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private class PaymentRequest
    {
        [Required]
        [StringLength(12)]
        public required string TokenCode { get; set; }

        [Required]
        [StringLength(12)]
        public required string AccountCode { get; set; }

        public required decimal Amount { get; set; }

        [StringLength(28)]
        public string? Memo { get; set; }

        public ExpiresIn ExpiresIn { get; set; }

        public bool ShareName { get; set; }

        public bool PayerCanChangeRequestedAmount { get; set; }
    }

    private enum ExpiresIn
    {
        FiveMinutes = 5,
        FifteenMinutes = 15,
        SixtyMinutes = 60
    }
}