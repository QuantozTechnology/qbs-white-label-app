// <auto-generated />
using System;
using Core.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230928104538_AddDeviceAuthentication")]
    partial class AddDeviceAuthentication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.CallbackAggregate.Callback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Code");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Content");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("DestinationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentRequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("PaymentRequestId");

                    b.ToTable("Callback", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.CustomerAggregate.CustomerDevicePublicKeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn");

                    b.Property<int>("CustomerOTPKeyStoreId")
                        .HasColumnType("int");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PublicKey");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOTPKeyStoreId");

                    b.ToTable("CustomerDevicePublicKeys", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.CustomerAggregate.CustomerOTPKeyStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("CustomerCode");

                    b.Property<string>("OTPKey")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("OTPKey");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("CustomerOTPKeyStorage", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.PaymentRequestAggregate.PaymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Code");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("CustomerCode");

                    b.Property<bool>("IsMerchant")
                        .HasColumnType("bit")
                        .HasColumnName("IsMerchant");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("PublicKey");

                    b.Property<decimal>("RequestedAmount")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("RequestedAmount");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("TokenCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("TokenCode");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("PaymentRequest", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.TransactionAggregate.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("Amount");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Memo")
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)")
                        .HasColumnName("Memo");

                    b.Property<int?>("PaymentRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentRequestId1")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReceiverName");

                    b.Property<string>("ReceiverPublicKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("ReceiverPublicKey");

                    b.Property<string>("SenderAccountCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SenderAccountCode");

                    b.Property<string>("SenderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SenderName");

                    b.Property<string>("SenderPublicKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("SenderPublicKey");

                    b.Property<string>("TokenCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("TokenCode");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("TransactionCode");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("PaymentRequestId");

                    b.HasIndex("PaymentRequestId1");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.CallbackAggregate.Callback", b =>
                {
                    b.HasOne("Core.Domain.Entities.PaymentRequestAggregate.PaymentRequest", null)
                        .WithMany("Callbacks")
                        .HasForeignKey("PaymentRequestId");
                });

            modelBuilder.Entity("Core.Domain.Entities.CustomerAggregate.CustomerDevicePublicKeys", b =>
                {
                    b.HasOne("Core.Domain.Entities.CustomerAggregate.CustomerOTPKeyStore", "CustomerOTPKeyStore")
                        .WithMany("PublicKeys")
                        .HasForeignKey("CustomerOTPKeyStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOTPKeyStore");
                });

            modelBuilder.Entity("Core.Domain.Entities.PaymentRequestAggregate.PaymentRequest", b =>
                {
                    b.OwnsOne("Core.Domain.Primitives.PaymentRequest.MerchantSettings", "MerchantSettings", b1 =>
                        {
                            b1.Property<int>("PaymentRequestId")
                                .HasColumnType("int");

                            b1.Property<string>("CallbackUrl")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("CallbackUrl");

                            b1.Property<string>("ReturnUrl")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ReturnUrl");

                            b1.HasKey("PaymentRequestId");

                            b1.ToTable("PaymentRequest");

                            b1.WithOwner()
                                .HasForeignKey("PaymentRequestId");
                        });

                    b.OwnsOne("Core.Domain.Primitives.PaymentRequest.PaymentRequestOptions", "Options", b1 =>
                        {
                            b1.Property<int>("PaymentRequestId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset?>("ExpiresOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("ExpiresOn");

                            b1.Property<bool>("IsOneOffPayment")
                                .HasColumnType("bit")
                                .HasColumnName("IsOneOffPayment");

                            b1.Property<string>("Memo")
                                .HasMaxLength(28)
                                .HasColumnType("nvarchar(28)")
                                .HasColumnName("Memo");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Name");

                            b1.Property<bool>("PayerCanChangeRequestedAmount")
                                .HasColumnType("bit")
                                .HasColumnName("PayerCanChangeRequestedAmount");

                            b1.HasKey("PaymentRequestId");

                            b1.ToTable("PaymentRequest");

                            b1.WithOwner()
                                .HasForeignKey("PaymentRequestId");

                            b1.OwnsMany("Core.Domain.Primitives.PaymentRequest.PaymentRequestParams", "Params", b2 =>
                                {
                                    b2.Property<int>("PaymentRequestId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Key")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("Key");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("Value");

                                    b2.HasKey("PaymentRequestId", "Id");

                                    b2.ToTable("PaymentRequestParams", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentRequestId");
                                });

                            b1.Navigation("Params");
                        });

                    b.Navigation("MerchantSettings");

                    b.Navigation("Options")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.TransactionAggregate.Payment", b =>
                {
                    b.HasOne("Core.Domain.Entities.PaymentRequestAggregate.PaymentRequest", "PaymentRequest")
                        .WithMany()
                        .HasForeignKey("PaymentRequestId");

                    b.HasOne("Core.Domain.Entities.PaymentRequestAggregate.PaymentRequest", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentRequestId1");

                    b.Navigation("PaymentRequest");
                });

            modelBuilder.Entity("Core.Domain.Entities.CustomerAggregate.CustomerOTPKeyStore", b =>
                {
                    b.Navigation("PublicKeys");
                });

            modelBuilder.Entity("Core.Domain.Entities.PaymentRequestAggregate.PaymentRequest", b =>
                {
                    b.Navigation("Callbacks");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
